{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"examples/","title":"Example page name override","text":""},{"location":"examples/#tabs","title":"Tabs","text":"1st part2nd part <pre><code>site_name: My Docs\nsite_url: http://mkdocs.nedevski.com\ntheme:\n  name: material\n  icon:\n    logo: fontawesome/solid/blog\n  palette:\n    - scheme: slate\n      toggle:\n        icon: material/weather-sunny\n        name: Dark mode\n      primary: green\n      accent: deep purple\n    - scheme: default\n      toggle:\n        icon: material/weather-night\n        name: Light mode\n      primary: green\n      accent: deep purple\n</code></pre> <pre><code>markdown_extensions:\n  - attr_list\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre>"},{"location":"examples/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"examples/#collapsible-thing","title":"Collapsible thing","text":"Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <ul> <li>This was marked (highlight)</li> <li>This was inserted (underline)</li> <li>This was deleted (strikethrough)</li> </ul>"},{"location":"examples/#key-combinations","title":"Key combinations","text":"<p>Ctrl+Alt+Del</p>"},{"location":"examples/#grid-cards","title":"Grid cards","text":"<ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul>"},{"location":"examples/#checklist","title":"Checklist","text":"<ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul>"},{"location":"blog/2023/06/07/budget-macro-keyboard-for-pc-audio-management/","title":"Budget Macro Keyboard for PC Audio Management","text":"<p>image:   path: /images/unifi.png   alt: HID Macros screenshot</p>","tags":["Guide","Macros"]},{"location":"blog/2023/06/07/budget-macro-keyboard-for-pc-audio-management/#the-problem","title":"The problem","text":"<p>I have a lot of audio input/output devices - headphones mic, audio interface mic, webcam mic and even more different audio outputs. Switching between them fast all of the time is a bit of a pain.</p> <p></p> <p>I often use programs that don't have built-in settings for overriding the used audio device and switching between different audio devices can be a lot of pain.</p> <p>For example Chrome - it uses the default input and output devices set by Windows. This means that if you want to change your active microphone, you need to open <code>Settings =&gt; System =&gt; Sound</code> and make the change there. Too slow!</p> <p>If you're a streamer - that's even worse - you want to have hotkeys for your scenes as well!</p>","tags":["Guide","Macros"]},{"location":"blog/2023/06/07/budget-macro-keyboard-for-pc-audio-management/#the-solution","title":"The solution","text":"<p>I solved my issue by creating a DIY macro keyboard, which runs VBS/Powershell scripts to change my audio devices.</p> <p>This approach allows me to change my active microphone separately from my active audio output device.</p> <p>Don't worry, it's not hard to setup and/or customize!</p>","tags":["Guide","Macros"]},{"location":"blog/2023/06/07/budget-macro-keyboard-for-pc-audio-management/#macro-keyboard-overview","title":"Macro keyboard overview","text":"<p>You need:</p> <ul> <li>Cheap numpad (ideally wireless) or a spare keyboard</li> <li>HID Macros (free software)</li> <li>Basic VBS skills</li> </ul> <p>HID Macros is an awesome free tool that changes the behaviour of your keys.</p> <p>But the really awesome part is that it recognises not only the key, but the device it belongs to. For example you can have 3 full-size keyboards and each key on each keyboard could be set to a different macro!</p>","tags":["Guide","Macros"]},{"location":"blog/2023/06/07/budget-macro-keyboard-for-pc-audio-management/#hid-macros-setup","title":"HID Macros setup","text":"<p>Download the program from here. Make sure you download the HidMacros and not the LuaMacros.</p> <p>Unzip the files and put them in a permament location, make a folder in <code>C:/Program Files</code> or in a custom folder in your choice.</p> <p>IMPORTANT!</p> <ul> <li> <p>Run the program as Administrator the first time, it needs that so it can set up everything.</p> </li> <li> <p>Don't forget to click \"Save configuration\" and \"Compile all\" every time you make a change.</p> </li> <li> <p>This program needs to be running in order for your macros to work. It does not have a setting for running when your computer starts, so you need to do that manually.</p> </li> </ul> <p>To add your macro, just click on \"New\", enter a \"Name\" and click \"Scan\" to record the trigger key.</p> <p>For the name I like to put the name of the actual key and the remapped key, for example <code>Num5-CtrlShiftF12</code>. That way you can keep things organized. Keep in mind that you can't reorder items, so all you have are the macro names.</p>","tags":["Guide","Macros"]},{"location":"blog/2023/06/07/budget-macro-keyboard-for-pc-audio-management/#add-a-key-re-bind","title":"Add a key re-bind","text":"<p>This is the easist option, however for some programs it might not work properly (for example Discord).</p> <p>You can re-bind your numpad keys to <code>F13</code>-<code>F35</code>. You can also add modifiers to create combinations like <code>Ctrl+F13</code>, <code>Shift+F13</code>, etc, so you have a LOT of shortcuts to work with. For example:</p> <ul> <li>F15 =&gt; <code>{F15}</code></li> <li>Ctrl + F15 =&gt; <code>^{F15}</code></li> <li>Shift + F15 =&gt; <code>+{F15}</code></li> <li>Alt + F15 =&gt; <code>%{F15}</code></li> <li>Ctrl + Alt + Shift + F15 =&gt; <code>^+%{F15}</code></li> </ul> <p>Here is a link to the full list of available keys.</p> <p></p>","tags":["Guide","Macros"]},{"location":"blog/2023/06/07/budget-macro-keyboard-for-pc-audio-management/#run-a-programscript","title":"Run a program/script","text":"<p>This is where things get really powerful. You can run your own VBS script macro on keypress.</p> <p>Just attach the VBS file in the \"run application\" field and you're good to go.</p> <p>Also remember to click the \"Save configuration\" and \"Compile all\" buttons on top of the program.</p> <p></p>","tags":["Guide","Macros"]},{"location":"blog/2023/06/07/budget-macro-keyboard-for-pc-audio-management/#audio-management-powershell-script","title":"Audio management Powershell script","text":"<p>The audio switching relies on AudioDeviceCmdlets. It's a free Powershell extension that allows you to manage your devices programatically.</p> <p>To install it, open Powershell as Administrator and run the following command:</p> <pre><code>Install-Module -Name AudioDeviceCmdlets\n</code></pre> <p>After you have that installed, create a folder somewhere on your PC. This will hold all of our scripts and macros.</p> <p>Create a new text file and name it <code>SetAudioDevice.ps1</code>. It's important to make sure that the extension is actually <code>.ps1</code> and not <code>.txt</code>.</p> <p>I've created a simple script that accepts the names of the devices as parameters (<code>audio</code> and <code>mic</code>), enumerates all of your devices and if there is a match - sets it as the active device. You need to provide the exact device name, otherwise it won't work.</p> <p>Paste the script below and save the file.</p> <pre><code>param ($audio=$null, $mic=$null)\n\nif ($audio -eq $null -and $mic -eq $null)\n{\n    exit\n}\n\n$devices = Get-AudioDevice -List\n\n$audioNameRegex = \"^($($audio))\\s[(].*[)]$\"\n$micNameRegex = \"^($($mic))\\s[(].*[)]$\"\n\nforeach ($device in $devices)\n{\n    if ($audio -ne $null -and $device.Type -eq \"Playback\" -and $device.Name -match $audioNameRegex) \n    {\n        Set-AudioDevice -ID $device.Id\n    }\n\n    if ($mic -ne $null -and $device.Type -eq \"Recording\" -and $device.Name -match $micNameRegex) \n    {\n        Set-AudioDevice -ID $device.Id\n    }\n}\n</code></pre> <p>In order to make using this script easier, I like to rename my devices beforehand and give them short and clear names to avoid confusion. On Windows 11 you can do that by going to <code>Settings =&gt; System =&gt; Sound</code> and opening the properties of the device. Keep in mind that you have to rename the audio output and the microphone separately, so try to set a simple convention like \"Headphones\" and \"Headphones Mic\".</p> <p>Now if you open a Powershell window and navigate to your folder (run <code>cd C:\\yourfolder</code> in the terminal), you can execute that powershell script.</p> <p>For example to set the audio output device to \"Speakers Presonus\" and the microphone to the \"Webcam Mic\", run the following command:</p> <pre><code>.\\SetAudioDevices.ps1 -executionpolicy bypass -audio \"Speakers Presonus\" -mic \"Webcam Mic\"\n</code></pre> <p>You can use only one of them or both at the same time, it doesn't matter.</p> <p>Important! If you get an error, this means that you have to allow your computer to run unsigned Powershell scripts locally</p> <p>To do that open a new Powershell window as an Administrator and enter the following command:</p> <pre><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine\n</code></pre> <p>After that try again and it should work.</p> <p>In order to run this script from anywhere on your system, use the full path of the script, for example:</p> <pre><code>C:\\Scripts\\AudioMacros\\SetAudioDevices.ps1 -audio \"Speaker name\" -mic \"Mic name\"\n</code></pre> <p>Great! You can control your audio devices with a script!</p> <p>However there is one small problem, the HID Macros does not work with Powershell scripts. That's why we have to create a VBS script for each of our devices.</p>","tags":["Guide","Macros"]},{"location":"blog/2023/06/07/budget-macro-keyboard-for-pc-audio-management/#creating-vbs-scripts-and-binding-them-to-a-key","title":"Creating VBS scripts and binding them to a key","text":"<p>Create a new file called <code>speakers-presonus.vbs</code> (or whatever your device name is). Make sure it's in the same directory as the Powershell script from the previous step.</p> <p>Open it with notepad and paste the following:</p> <pre><code>Dim audio\naudio = \"Speakers Presonus\"\n\nDim mic\nmic = \"Webcam Mic\"\n\nDim ps_command\nps_command = \".\\SetAudioDevices.ps1 -audio '\" &amp; audio &amp; \"' -mic '\" &amp; mic &amp; \"'\"\n\nSet objShell = CreateObject(\"Wscript.shell\")\nobjShell.run \"powershell.exe -command \" &amp; ps_command, 0\n</code></pre> <p>If you want to change only the \"audio\" or only the \"mic\", feel free to delete everything between the quotes, so you are left with:</p> <pre><code>Dim mic\nmic = \"\"\n</code></pre> <p>Now go back to HID Macros and put the full path of the VBS file in the \"run application\" field for your specific key macro. Remember to click on \"Save configuration\" and \"Compile all\" and voila!</p> <p>Now pressing the corresponding key changes your audio device(s)!</p>","tags":["Guide","Macros"]},{"location":"guides/","title":"Index","text":"<ul> <li>Proxmox</li> <li>Home Assistant OS</li> <li>Ubuntu with Docker</li> <li>Unraid</li> <li>Media Server - Plex, qBit, *arr</li> <li>Gitea + Gitea Runners</li> <li>Sonarqube</li> <li>Immich</li> </ul>"},{"location":"homelab/","title":"Getting started","text":""},{"location":"homelab/#getting-started","title":"Getting started","text":"<p>So, you want to self-host your applications?</p> <p>Before starting your selfhosting journey, it's really important to answer this question:</p> <p>What do YOU want to start self hosting?</p> <p>Your needs/wants/budget could dramatically change your approach and cost.</p> <p>Self-hosting can solve a multitude of (modern) problems and help you save a lot of money in the long run by using free alternatives to popular cloud apps. It can also be a time/money drain if you don't plan ahead. A well thought approach can help you:</p> <ul> <li> Improve your privacy by hosting your own data</li> <li> Reduce dependence on various cloud services - Google Drive, Netflix, Github, VPN providers</li> <li> Save money on cloud subscriptions</li> <li> Provide you with a developer sandbox, that's more powerful than cloud VMs for fraction of the cost</li> <li> Host your own personal websites or web applications</li> <li> Allow you to control your smart home with something centralized like HomeAssistant</li> </ul> <p>Here is an evergrowing list of applications that you can easily self-host - awesome-selfhosted on Github</p>"},{"location":"homelab/#topics","title":"Topics","text":"<ul> <li>Using Hypervisor instead of Bare Metal OS</li> <li>Choosing the right hardware</li> <li>Using Dockerized apps</li> <li>Setting up the file structure</li> <li>Tracking configuration with Git</li> <li>Core - VS Code Server</li> <li>Core - DDNS</li> <li>Core - Wireguard VPN</li> <li>Exposing apps to the internet</li> <li>Core - Nginx vs Cloudflare Tunnels</li> <li>Personal blog - Wordpress, Ghost</li> <li>Media server - Plex, Torrent, *arr</li> </ul>"},{"location":"homelab/choosing-your-hardware/","title":"Choosing your hardware","text":""},{"location":"homelab/choosing-your-hardware/#getting-started","title":"Getting started","text":"<p>When you're starting out, it's likely you don't know what your needs are going to be. You might be scared of using Docker, Linux or the console. This is why I always recommend to start experimenting on your current PC. This will give you some insight on the workflow and if you need a dedicated server at all.</p> <p>Download Docker and learn how to install a containerized application. Find apps that you might find useful and install something simple like Wordpress or Mealie. You will need to learn about how containers work, how to open ports, using networks and volumes. It might be a steep learning curve, so it's best to get familiar with the software before buying a dedicated machine.</p>"},{"location":"homelab/choosing-your-hardware/#how-to-approach-choosing-the-hardware","title":"How to approach choosing the hardware","text":"<p>Choosing your hardware will always depend on your needs and budget. The approach if you want a server just for hosting apps or if you need storage is different.</p> <p>If you only need to host your apps and websites - nothing beats a good Micro PC. It has low idle power consumption (usually ~10w) and the used market is full of them, so you can get one for really cheap.</p> <p>The most important thing for me is always the idle power consumption. Your machine(s) will be on 24/7 and every watt saved will accumulate over time and a bit of planning here can save you a lot in the long run.</p> <p>I also have an UPS and lower consumption means my machines will be able to run longer on battery. This is also why I prefer to use two machines - one micro PC with the most important things and one NAS for heavier applications and storage that I can turn off if I lose power and extend my time on battery.</p>"},{"location":"homelab/choosing-your-hardware/#introduction","title":"\ud83d\udcdd Introduction","text":"<p>Picking the right hardware is one of the most important steps in self-hosting. Whether you're building a simple automation hub or a full-featured NAS, your choices will affect performance, power usage, expandability, and long-term reliability. This guide breaks down the key components and helps you choose what fits your needs \u2014 without overspending or overcomplicating things.</p>"},{"location":"homelab/choosing-your-hardware/#form-factor-micro-pc-vs-tower","title":"\ud83e\uddf3 Form Factor: Micro PC vs Tower","text":""},{"location":"homelab/choosing-your-hardware/#micro-pc-mini-pc-nuc-sff","title":"\ud83e\uddca Micro PC (Mini PC, NUC, SFF)","text":"<ul> <li>\u2705 Small, quiet, and low power.</li> <li>\u2705 Great for basic services or light workloads.</li> <li>\u274c Limited expandability (fewer SATA ports, no PCIe slots).</li> <li>\u274c Harder to cool under heavy load.</li> </ul>"},{"location":"homelab/choosing-your-hardware/#tower-atxmatx","title":"\ud83c\udfd7\ufe0f Tower (ATX/mATX)","text":"<ul> <li>\u2705 More room for drives, RAM, and expansion cards.</li> <li>\u2705 Easier to cool and upgrade over time.</li> <li>\u274c Takes more space and may use more power.</li> </ul> <p>\ud83d\udca1 Tip: If you're building a NAS or plan to expand later, a tower gives you more flexibility.</p>"},{"location":"homelab/choosing-your-hardware/#cpu-brains-of-the-operation","title":"\ud83d\udda5\ufe0f CPU: Brains of the Operation","text":"<ul> <li>Low Power CPUs (like Intel i3/i5 non-K or AMD Ryzen 5) are great for 24/7 uptime.</li> <li>More Cores help if you plan to run multiple services or virtual machines.</li> <li>Avoid Overkill \u2014 you don\u2019t need a gaming CPU for a NAS or automation hub.</li> </ul> <p>\ud83d\udca1 Tip: Look for CPUs that support low C-states to save power when idle.</p>"},{"location":"homelab/choosing-your-hardware/#ram-memory-matters","title":"\ud83e\udde0 RAM: Memory Matters","text":"<ul> <li>8GB is fine for basic setups.</li> <li>16/32GB is better if you use containers, VMs, or heavier services.</li> <li>64GB or more is useful if you're running multiple virtual machines or lots of heavy containers.</li> </ul>"},{"location":"homelab/choosing-your-hardware/#storage-speed-vs-capacity","title":"\ud83d\udcbe Storage: Speed vs Capacity","text":"<ul> <li>SSD (NVMe or SATA) for fast boot and app performance.</li> <li>HDDs for bulk storage (media, backups, etc.).</li> </ul> <p>\ud83d\udca1 If you need a lot of storage \u2014 for things like movies, photos, backups, or shared folders \u2014 you're probably heading toward a NAS (Network Attached Storage) setup. A NAS is designed to hold multiple drives and serve files reliably across your network.</p>"},{"location":"homelab/choosing-your-hardware/#summary","title":"\ud83e\udded Summary","text":"<p>Pick hardware based on your real needs \u2014 not hype. Start small, build smart, and leave room to grow. A well-balanced setup will save you headaches, power, and money.</p>"},{"location":"homelab/hypervisor-vs-bare-metal/","title":"Hypervisor vs Bare metal","text":""},{"location":"homelab/hypervisor-vs-bare-metal/#what-is-a-hypervisor-and-why-use-one","title":"\ud83e\udde0 What Is a Hypervisor (and Why Use One)?","text":""},{"location":"homelab/hypervisor-vs-bare-metal/#simple-explanation","title":"Simple Explanation","text":"<p>When you self-host, you can either install your services directly on your computer (bare metal) or use something called a hypervisor. A hypervisor lets you run multiple mini-computers (called virtual machines) on one physical machine.</p> <p>Think of it like having several separate rooms inside one house - each room can have its own setup, and if something breaks in one room, the others stay safe.</p>"},{"location":"homelab/hypervisor-vs-bare-metal/#why-use-a-hypervisor","title":"\ud83d\udee0\ufe0f Why Use a Hypervisor?","text":"<ul> <li> <p>Keeps Things Separate   You can run different operating systems (Windows, Ubuntu, HomeAssistant) in their own spaces. If one crashes, the others keep working.</p> </li> <li> <p>Easy Backups   You can take a \"snapshot\" of a virtual machine and roll back if something goes wrong.</p> </li> <li> <p>Flexible Setup   You can test new things without messing up your main system.</p> </li> <li> <p>Better Organization   It\u2019s easier to manage updates, security, and troubleshooting when services are split.</p> </li> </ul>"},{"location":"homelab/hypervisor-vs-bare-metal/#when-bare-metal-might-be-better","title":"\ud83e\uddea When Bare Metal Might Be Better","text":"<ul> <li>You only want to run one thing (like just a NAS).</li> <li>Your hardware is very limited (not much RAM or CPU).</li> <li>You want the simplest setup possible.</li> </ul>"},{"location":"homelab/hypervisor-vs-bare-metal/#good-hypervisors-to-try","title":"\ud83e\uddf0 Good Hypervisors to Try","text":"<ul> <li>Proxmox VE - Free, beginner-friendly, and great for home labs.</li> <li>VirtualBox - Easy to use for testing on your desktop.</li> <li>Hyper-V - Built into Windows Pro and Enterprise editions; good for Windows users who want to try virtualization without installing extra software.</li> </ul>"},{"location":"homelab/hypervisor-vs-bare-metal/#summary","title":"\ud83e\udded Summary","text":"<p>If you're just starting out and want flexibility, safety, and room to grow - a hypervisor is a great choice. It adds a bit of complexity at first, but makes your setup much easier to manage in the long run.</p>"},{"location":"homelab/servers/","title":"Example page name override","text":""},{"location":"homelab/servers/#tabs","title":"Tabs","text":"1st part2nd part <pre><code>site_name: My Docs\nsite_url: http://mkdocs.nedevski.com\ntheme:\n  name: material\n  icon:\n    logo: fontawesome/solid/blog\n  palette:\n    - scheme: slate\n      toggle:\n        icon: material/weather-sunny\n        name: Dark mode\n      primary: green\n      accent: deep purple\n    - scheme: default\n      toggle:\n        icon: material/weather-night\n        name: Light mode\n      primary: green\n      accent: deep purple\n</code></pre> <pre><code>markdown_extensions:\n  - attr_list\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre>"},{"location":"homelab/servers/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"homelab/servers/#collapsible-thing","title":"Collapsible thing","text":"Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <ul> <li>This was marked (highlight)</li> <li>This was inserted (underline)</li> <li>This was deleted (strikethrough)</li> </ul>"},{"location":"homelab/servers/#key-combinations","title":"Key combinations","text":"<p>Ctrl+Alt+Del</p>"},{"location":"homelab/servers/#grid-cards","title":"Grid cards","text":"<ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul>"},{"location":"homelab/servers/#checklist","title":"Checklist","text":"<ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul>"},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/general/","title":"General","text":""}]}